#include <LiquidCrystal.h>
#include <Adafruit_Fingerprint.h>
#include <IRremote.h>

// Create an LCD object. Parameters: (RS, E, D4, D5, D6, D7):
LiquidCrystal lcd = LiquidCrystal(8,9,10,11,12,13);


// pin #4 is IN from sensor (ORANGE wire)
// pin #3 is OUT from arduino  (WHITE wire)
// Set up the serial port to use softwareserial..
SoftwareSerial mySerial(4,3);

IRrecv irrecv(5);
decode_results results;
unsigned long key_value = 0;


Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

int fingerprintID = 0;
int fingerprintCheck = 0;

const int trigger = 6;
const int echo = 7;

int counter1 = 0;

long time_taken;
int dist, distance;

#define joyX A3
#define joyY A2
const int jButton = 2;
int volume = 0, oldVolume = 0, i = 0;
bool joyReleased[3] = { true, true, true };
float xValue, yValue;
long xVol;

void setup() {
 Serial.begin(9600);
 
 // Sensor set up
 pinMode(trigger, OUTPUT);
 pinMode(echo, INPUT);
 // Specify the LCD's number of columns and rows. Change to (20, 4) for a 20x4 LCD:
 lcd.begin(16, 2);

 // IR receiver setup
 irrecv.enableIRIn();

 // Fingerprint scanner test
 while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();

  if (finger.templateCount == 0) {
    lcd.print("No fingerprint");
    lcd.setCursor(2,1);
    lcd.print("template found");
    Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  }
  else {
    lcd.print("Waiting for");
    lcd.setCursor(2,1);
    lcd.print("valid finger...");
    Serial.println("Waiting for valid finger...");
    Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  }

  // joystick set up
  pinMode(jButton, INPUT);
}

void loop()                     // run over and over again
{
 fingerprintID = getFingerprintID();
 delay(50);  //don't need to run this at full speed.

 // return fingerprint doesn't match if the fingerprint is not enrolled
 if (fingerprintID == -2) {
  lcd.clear();
  lcd.print("Fingerprint");
  lcd.setCursor(2,1);
  lcd.print("doesn't match");
  delay(1000);
  lcd.clear();
 }
 
 if (fingerprintID != -1 and fingerprintID != -2) {
  fingerprintCheck += 1;
 }

 // print out hello message on the lcd
 if (fingerprintCheck == 1) {
  lcd.clear();
  Serial.println("Hello");
  lcd.print("Device unlocked");
  delay(2000);
  lcd.clear();
  fingerprintCheck = 2;
 }


 // enabling other functions
 else if (fingerprintCheck == 2) {
  calculate_distance(trigger,echo);
  distance = dist;

  if (counter1 == 1){
    Serial.println("Playback control mode on.");
    // Set the cursor on the third column and the first row, counting starts at 0:
    lcd.setCursor(2, 0);
  // Print the string 'Playback mode:':
    lcd.print("Playback Mode:");
  // Set the cursor on the third column and the second row:
    lcd.setCursor(2, 1);
  // Print the string 'ON':
    lcd.print("ON");
    delay(1000);
    counter1 = 2;
  }

  // enabling the sensor for playing and pausing
  if (counter1 == 2){
    if ((distance >2) && (distance <20)){
      //if your hand is in the range between 2cm and 20cm from the sensor, play/pause will be written into Serial
      lcd.clear();
      Serial.println("Play/Pause");
      lcd.print("Play/Pause"); 
      delay(1000);
      lcd.clear();
      }
  }
  else if (counter1 == 3){
    Serial.println("Playback control mode off.");
    lcd.setCursor(2,0);
    lcd.print("Playback Mode:");
    lcd.setCursor(2,1);
    lcd.print("OFF");
    delay(1000); 
    lcd.clear();
    counter1 = 0;
  }

  // read the input of the remote controller
  if (irrecv.decode(&results)){

        if ((results.value == 0xFFA25D) or (results.value == 0xFFE21D)){
          counter1 += 1;
        }
 
        if (results.value == 0XFFFFFFFF)
        results.value = key_value;
        lcd.setCursor(0, 0);
        lcd.clear();
        
        switch(results.value){
          case 0xFF629D:
          lcd.print("Volume up");
          Serial.println("Volume Up");
          delay(400);
          lcd.clear();
          break;
          case 0xFFE21D:
          lcd.print("");
          break;
          case 0xFF22DD:
          lcd.print("Previous");
          Serial.println("Prev Track");
          delay(400);
          lcd.clear();
          break;
          case 0xFF02FD:
          Serial.println("Play/Pause");
          lcd.print("Play/Pause");
          delay(1000);
          lcd.clear();
          break ;  
          case 0xFFC23D:
          lcd.print("Next");
          Serial.println("Next Track");
          delay(400);
          lcd.clear();
          break ;               
          case 0xFFE01F:
          lcd.print("");
          break ;  
          case 0xFFA857:
          lcd.print("Volume down");
          Serial.println("Volume Down");
          delay(400);
          lcd.clear();
          break ;  
        }
        key_value = results.value;
        irrecv.resume(); 
    
  }
  xValue = floor((analogRead(joyX)-500)/100);
  yValue = floor((analogRead(joyY)-500)/100);
  if( xValue > 0 && xVol <= millis()-400/xValue ) {
    Serial.println(150+int(xValue)); //change the python code to receive '15' as the case for volume up
    xVol = millis();
  } else if( xValue < 0 && xVol <= millis()+400/xValue ) {
    Serial.println(140-int(xValue)); //change the python code to receive '14' as the case for volume down
    xVol = millis();
  }

  for(i=0 ; i<2 ; i++) {
    if(xValue*pow(-1,i) > 0 && joyReleased[i]) {
      joyReleased[i] = false;
    } else if(xValue*pow(-1,i) == 0 && joyReleased[i] == false) {
      joyReleased[i] = true;
      if(i == 0) { 
        Serial.println("Prev Track"); lcd.print("Prev"); delay(400); lcd.clear();}
      if(i == 1) { 
        Serial.println("Next Track"); lcd.print("Next"); delay(400); lcd.clear();}
    }
  }

  for(i=0 ; i<2 ; i++) {
    if(yValue*pow(-1,i) > 0 && joyReleased[i]) {
      joyReleased[i] = false;
    } else if(yValue*pow(-1,i) == 0 && joyReleased[i] == false) {
      joyReleased[i] = true;
      if(i == 0) { 
        Serial.println("Volume Down"); lcd.print("Volume down"); delay(400); lcd.clear();}
      if(i == 1) { 
        Serial.println("Volume Up"); lcd.print("Volume up");delay(400); lcd.clear();}
    }
  }
  
  /*if(not digitalRead(jButton) && joyReleased[2]) {
    joyReleased[2] = false;
  } else if(not digitalRead(jButton) && joyReleased[2] == false) {
    joyReleased[2] = true;
    Serial.println("Play/Pause"); 
  } 
  */
 }

 // print out goodbye message on the lcd
 else if (fingerprintCheck == 3) {
  Serial.println("Good bye");
  lcd.print("Device locked");
  delay(1000);
  lcd.clear();
  fingerprintCheck = 0;
 }
}

void calculate_distance(int trigger, int echo) 
{
  digitalWrite(trigger, LOW);
  delay(10);
  digitalWrite(trigger, HIGH);
  delay(10);
  digitalWrite(trigger, LOW);
  
  time_taken = pulseIn(echo, HIGH);
  dist= (time_taken/29)/2;  // (in centimeter) this is a formula get from the internet. 
  //the basic idea is that we take the time the wave travels and multiple with the speed of sound (or divide by 29), 
  //then divide by 2 because the wave travels to and from the sensor.
}

//get fingerprint status function
int getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -2;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -2;
  
  // found a match!
  Serial.print("Found ID #"); 
  Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); 
  Serial.println(finger.confidence);
  return finger.fingerID; 
}
